// ECE 5984 S20 Assignment 3: available.cpp
// Group: Ashwin and SengMing

////////////////////////////////////////////////////////////////////////////////

#include "llvm/IR/Function.h"
#include "llvm/Pass.h"
#include "llvm/Support/raw_ostream.h"
#include <DominatorPass.h>
#include <IntersectionMeet.h>
#include <KillGen.h>
#include <dataflow.h>

using namespace llvm;

/**
 * @brief Class to kill and gen doms list
 */
llvm::BitVector KillGenDoms::killEval(llvm::BasicBlock *BB,
                                      llvm::BitVector &meet_res,
                                      std::vector<BasicBlock *> &domainset) {
        llvm::BitVector BBkill(MAX_BITS_SIZE);
        // TODO: ADD IMPLEMENTATION
        // No Kill for Dominator pass
        BBkill.reset();
        return BBkill;
}
llvm::BitVector KillGenDoms::genEval(llvm::BasicBlock *BB,
                                     llvm::BitVector &meet_res,
                                     std::vector<BasicBlock *> &domainset) {
        llvm::BitVector BBgen(MAX_BITS_SIZE);
        // TODO: ADD IMPLEMENTATION
        std::vector<BasicBlock *>::iterator it =
            std::find(domainset.begin(), domainset.end(), BB);
        BBgen.set((size_t)(it - domainset.begin()));
        return BBgen;
}

/**
 * @brief Primary function pass to run Dominators pass.
 */
DenseMap<BasicBlock *, BBInOutBits *> *DominatorsPass::getDomResults() {
        return DomTree;
}
std::vector<BasicBlock *> *DominatorsPass::getBBIds() { return bb_ids; }
DominatorsPass::DominatorsPass() : FunctionPass(ID) {}

bool DominatorsPass::runOnFunction(Function &F) {
        // Start of our modifications

        // Instantiate requirements
        IntersectionMeet intersect;
        KillGenDoms killGenDom;
        for (Function::iterator FI = F.begin(), FE = F.end(); FI != FE; ++FI) {
                BasicBlock *block = &*FI;
                bb_ids.push_back(block);
        }
        BaseTransferFunction transferFunc;
        DataflowFramework<BasicBlock *> DF(intersect, FORWARD, EMPTY, F, bb_ids,
                                           killGenDom, transferFunc);
        outs() << "Dominator Pass : \n\n";
        DomTree = DF.run();
        for (auto it = DomTree->begin(); it != DomTree->end(); ++it) {
                outs() << "Basic Block" << *(it->first) << "\n"
                       << "Dominators are << "
                       << "\n";
                llvm::BitVector doms = (it->second->m_OUT);
                for (int bitIndex : doms.set_bits()) {
                        //                        outs() <<
                        // (bb_ids[bitIndex])->getName()
                        //                        << "\t here ";
                        outs() << *(bb_ids[bitIndex]) << "\n\n ";
                }
        }

        // Did not modify the incoming Function.
        return false;
}

void DominatorsPass::getAnalysisUsage(AnalysisUsage &AU) const {
        AU.setPreservesAll();
}

char DominatorsPass::ID = 0;
RegisterPass<DominatorsPass> X("dominators", "ECE 5984 Dominators");
